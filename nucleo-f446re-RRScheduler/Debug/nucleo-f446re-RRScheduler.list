
nucleo-f446re-RRScheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000058c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000750  08000750  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000750  08000750  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000750  08000750  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000750  08000750  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000750  08000750  00010750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000754  08000754  00010754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000758  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000004  0800075c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  0800075c  00020064  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000007c9  00000000  00000000  0002002e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000412  00000000  00000000  000207f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000158  00000000  00000000  00020c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000110  00000000  00000000  00020d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002349  00000000  00000000  00020e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000019d7  00000000  00000000  000231c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000828d  00000000  00000000  00024b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002ce25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000374  00000000  00000000  0002ce78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000738 	.word	0x08000738

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08000738 	.word	0x08000738

08000204 <SysTick_Handler>:


#include "main.h"

void SysTick_Handler(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	update_global_tick_count();
 8000208:	f000 f990 	bl	800052c <update_global_tick_count>
	unblock_task();
 800020c:	f000 f99c 	bl	8000548 <unblock_task>
	*ICSR_REG |= (1 << 28);
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <SysTick_Handler+0x1c>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a02      	ldr	r2, [pc, #8]	; (8000220 <SysTick_Handler+0x1c>)
 8000216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800021a:	6013      	str	r3, [r2, #0]
}
 800021c:	bf00      	nop
 800021e:	bd80      	pop	{r7, pc}
 8000220:	e000ed04 	.word	0xe000ed04

08000224 <PendSV_Handler>:

__attribute__((naked)) void PendSV_Handler(void)
{
	/* Here, context switching is done */
	// Save the context (state) of the current task
	__asm volatile("PUSH {LR}");
 8000224:	b500      	push	{lr}
	__asm volatile("MRS R0, PSP");
 8000226:	f3ef 8009 	mrs	r0, PSP
	__asm volatile("STMDB R0!, {R4-R11}");
 800022a:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm volatile("BL save_psp_value");
 800022e:	f000 f9cb 	bl	80005c8 <save_psp_value>

	// Schedule the next task
	__asm volatile("BL update_task");
 8000232:	f000 f9dd 	bl	80005f0 <update_task>

	// Retrieve the context (state) of the next scheduled task
	 __asm volatile("BL get_psp_value");
 8000236:	f000 f9b7 	bl	80005a8 <get_psp_value>
	 __asm volatile("LDMIA R0!, {R4-R11}");
 800023a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	 __asm volatile("MSR PSP, R0");
 800023e:	f380 8809 	msr	PSP, r0

	 // Return to thread mode
	 __asm volatile("POP {LR}");
 8000242:	f85d eb04 	ldr.w	lr, [sp], #4
	 __asm volatile("BX LR");
 8000246:	4770      	bx	lr

}
 8000248:	bf00      	nop

0800024a <HardFault_Handler>:

void HardFault_Handler(void)
{
 800024a:	b480      	push	{r7}
 800024c:	af00      	add	r7, sp, #0
	while (1);
 800024e:	e7fe      	b.n	800024e <HardFault_Handler+0x4>

08000250 <UsageFault_Handler>:
}

void UsageFault_Handler(void)
{
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
	while (1);
 8000254:	e7fe      	b.n	8000254 <UsageFault_Handler+0x4>

08000256 <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 8000256:	b480      	push	{r7}
 8000258:	af00      	add	r7, sp, #0
	while (1);
 800025a:	e7fe      	b.n	800025a <MemManage_Handler+0x4>

0800025c <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
	while (1);
 8000260:	e7fe      	b.n	8000260 <BusFault_Handler+0x4>
	...

08000264 <Init_LEDs>:
{
  for(uint32_t i = 0 ; i < count ; i++);
}

void Init_LEDs(void)
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0

	*RCC_AHB1ENR_REG |= (1 << 2);
 8000268:	4b10      	ldr	r3, [pc, #64]	; (80002ac <Init_LEDs+0x48>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a0f      	ldr	r2, [pc, #60]	; (80002ac <Init_LEDs+0x48>)
 800026e:	f043 0304 	orr.w	r3, r3, #4
 8000272:	6013      	str	r3, [r2, #0]
	*GPIOC_MODE_REG |= (1 << (2 * LED_1));
 8000274:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <Init_LEDs+0x4c>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a0d      	ldr	r2, [pc, #52]	; (80002b0 <Init_LEDs+0x4c>)
 800027a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800027e:	6013      	str	r3, [r2, #0]
	*GPIOC_MODE_REG |= (1 << (2 * LED_2));
 8000280:	4b0b      	ldr	r3, [pc, #44]	; (80002b0 <Init_LEDs+0x4c>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a0a      	ldr	r2, [pc, #40]	; (80002b0 <Init_LEDs+0x4c>)
 8000286:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800028a:	6013      	str	r3, [r2, #0]
	*GPIOC_MODE_REG |= (1 << (2 * LED_3));
 800028c:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <Init_LEDs+0x4c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a07      	ldr	r2, [pc, #28]	; (80002b0 <Init_LEDs+0x4c>)
 8000292:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000296:	6013      	str	r3, [r2, #0]
	*GPIOC_MODE_REG |= (1 << (2 * LED_4));
 8000298:	4b05      	ldr	r3, [pc, #20]	; (80002b0 <Init_LEDs+0x4c>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a04      	ldr	r2, [pc, #16]	; (80002b0 <Init_LEDs+0x4c>)
 800029e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002a2:	6013      	str	r3, [r2, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_GREEN));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_ORANGE));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
#endif
}
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr
 80002ac:	40023830 	.word	0x40023830
 80002b0:	40020800 	.word	0x40020800

080002b4 <toggle_led>:

void toggle_led(uint16_t led_no)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	80fb      	strh	r3, [r7, #6]
  *GPIOC_ODR_REG ^= (1 << led_no);
 80002be:	4b07      	ldr	r3, [pc, #28]	; (80002dc <toggle_led+0x28>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	88fa      	ldrh	r2, [r7, #6]
 80002c4:	2101      	movs	r1, #1
 80002c6:	fa01 f202 	lsl.w	r2, r1, r2
 80002ca:	4611      	mov	r1, r2
 80002cc:	4a03      	ldr	r2, [pc, #12]	; (80002dc <toggle_led+0x28>)
 80002ce:	404b      	eors	r3, r1
 80002d0:	6013      	str	r3, [r2, #0]
}
 80002d2:	bf00      	nop
 80002d4:	370c      	adds	r7, #12
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bc80      	pop	{r7}
 80002da:	4770      	bx	lr
 80002dc:	40020814 	.word	0x40020814

080002e0 <main>:
TCB_t user_tasks[MAX_TASKS];
uint32_t g_tick_cnt = 0;
uint32_t current_task = 1;

int main(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0

	EnableProcessorFaults();
 80002e4:	f000 f9be 	bl	8000664 <EnableProcessorFaults>

	SchedStack_Init(SCHED_START_STACK);
 80002e8:	4807      	ldr	r0, [pc, #28]	; (8000308 <main+0x28>)
 80002ea:	f000 f82e 	bl	800034a <SchedStack_Init>

	Init_TaskStack();
 80002ee:	f000 f831 	bl	8000354 <Init_TaskStack>

	Init_LEDs();
 80002f2:	f7ff ffb7 	bl	8000264 <Init_LEDs>

	Init_SystickTimer(TICK_HZ);
 80002f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002fa:	f000 f8ab 	bl	8000454 <Init_SystickTimer>

	change_sp_to_psp();
 80002fe:	f000 f8d7 	bl	80004b0 <change_sp_to_psp>

	Task1_Handler();
 8000302:	f000 f805 	bl	8000310 <Task1_Handler>

    /* Loop forever */
	for(;;);
 8000306:	e7fe      	b.n	8000306 <main+0x26>
 8000308:	2001f000 	.word	0x2001f000

0800030c <IdleTask_Handler>:

__attribute__((naked)) void IdleTask_Handler(void)
{
	while (1)
	{
		__asm volatile("WFI");
 800030c:	bf30      	wfi
 800030e:	e7fd      	b.n	800030c <IdleTask_Handler>

08000310 <Task1_Handler>:
	}
}

void Task1_Handler(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	while (1)
	{
		toggle_led(LED_1);
 8000314:	2008      	movs	r0, #8
 8000316:	f7ff ffcd 	bl	80002b4 <toggle_led>
		task_delay(1000);
 800031a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800031e:	f000 f8d5 	bl	80004cc <task_delay>
		toggle_led(LED_1);
 8000322:	e7f7      	b.n	8000314 <Task1_Handler+0x4>

08000324 <Task2_Handler>:
	}
}

void Task2_Handler(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	while (1)
	{
		toggle_led(LED_2);
 8000328:	2009      	movs	r0, #9
 800032a:	f7ff ffc3 	bl	80002b4 <toggle_led>
		task_delay(500);
 800032e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000332:	f000 f8cb 	bl	80004cc <task_delay>
		toggle_led(LED_2);
 8000336:	e7f7      	b.n	8000328 <Task2_Handler+0x4>

08000338 <Task3_Handler>:
	}
}

void Task3_Handler(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	while (1)
	{
		toggle_led(LED_3);
 800033c:	2006      	movs	r0, #6
 800033e:	f7ff ffb9 	bl	80002b4 <toggle_led>
		task_delay(250);
 8000342:	20fa      	movs	r0, #250	; 0xfa
 8000344:	f000 f8c2 	bl	80004cc <task_delay>
		toggle_led(LED_3);
 8000348:	e7f8      	b.n	800033c <Task3_Handler+0x4>

0800034a <SchedStack_Init>:

#include "main.h"

// Assessing scheduler stack statically
__attribute__((naked)) void SchedStack_Init(uint32_t schedStackStart)
{
 800034a:	4603      	mov	r3, r0
	__asm volatile("MSR MSP, %0" ::"r"(schedStackStart));
 800034c:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");
 8000350:	4770      	bx	lr
}
 8000352:	bf00      	nop

08000354 <Init_TaskStack>:

// Assessing each task private stack statically
void Init_TaskStack(void)
{
 8000354:	b480      	push	{r7}
 8000356:	b085      	sub	sp, #20
 8000358:	af00      	add	r7, sp, #0
	// Here, we store the values of the addresses of each task stack reached point
	__vo uint32_t *pPSP;

	user_tasks[0].psp_value = IDLE_START_STACK;
 800035a:	4b35      	ldr	r3, [pc, #212]	; (8000430 <Init_TaskStack+0xdc>)
 800035c:	4a35      	ldr	r2, [pc, #212]	; (8000434 <Init_TaskStack+0xe0>)
 800035e:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = TASK1_START_STACK;
 8000360:	4b33      	ldr	r3, [pc, #204]	; (8000430 <Init_TaskStack+0xdc>)
 8000362:	4a35      	ldr	r2, [pc, #212]	; (8000438 <Init_TaskStack+0xe4>)
 8000364:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = TASK2_START_STACK;
 8000366:	4b32      	ldr	r3, [pc, #200]	; (8000430 <Init_TaskStack+0xdc>)
 8000368:	4a34      	ldr	r2, [pc, #208]	; (800043c <Init_TaskStack+0xe8>)
 800036a:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = TASK3_START_STACK;
 800036c:	4b30      	ldr	r3, [pc, #192]	; (8000430 <Init_TaskStack+0xdc>)
 800036e:	4a34      	ldr	r2, [pc, #208]	; (8000440 <Init_TaskStack+0xec>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30

	user_tasks[0].current_state = STATE_READY;
 8000372:	4b2f      	ldr	r3, [pc, #188]	; (8000430 <Init_TaskStack+0xdc>)
 8000374:	2201      	movs	r2, #1
 8000376:	721a      	strb	r2, [r3, #8]
	user_tasks[1].current_state = STATE_READY;
 8000378:	4b2d      	ldr	r3, [pc, #180]	; (8000430 <Init_TaskStack+0xdc>)
 800037a:	2201      	movs	r2, #1
 800037c:	761a      	strb	r2, [r3, #24]
	user_tasks[2].current_state = STATE_READY;
 800037e:	4b2c      	ldr	r3, [pc, #176]	; (8000430 <Init_TaskStack+0xdc>)
 8000380:	2201      	movs	r2, #1
 8000382:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	user_tasks[3].current_state = STATE_READY;
 8000386:	4b2a      	ldr	r3, [pc, #168]	; (8000430 <Init_TaskStack+0xdc>)
 8000388:	2201      	movs	r2, #1
 800038a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	user_tasks[0].task_handler = IdleTask_Handler;
 800038e:	4b28      	ldr	r3, [pc, #160]	; (8000430 <Init_TaskStack+0xdc>)
 8000390:	4a2c      	ldr	r2, [pc, #176]	; (8000444 <Init_TaskStack+0xf0>)
 8000392:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = Task1_Handler;
 8000394:	4b26      	ldr	r3, [pc, #152]	; (8000430 <Init_TaskStack+0xdc>)
 8000396:	4a2c      	ldr	r2, [pc, #176]	; (8000448 <Init_TaskStack+0xf4>)
 8000398:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = Task2_Handler;
 800039a:	4b25      	ldr	r3, [pc, #148]	; (8000430 <Init_TaskStack+0xdc>)
 800039c:	4a2b      	ldr	r2, [pc, #172]	; (800044c <Init_TaskStack+0xf8>)
 800039e:	62da      	str	r2, [r3, #44]	; 0x2c
	user_tasks[3].task_handler = Task3_Handler;
 80003a0:	4b23      	ldr	r3, [pc, #140]	; (8000430 <Init_TaskStack+0xdc>)
 80003a2:	4a2b      	ldr	r2, [pc, #172]	; (8000450 <Init_TaskStack+0xfc>)
 80003a4:	63da      	str	r2, [r3, #60]	; 0x3c

	for (uint32_t i = 0; i < MAX_TASKS; i++)
 80003a6:	2300      	movs	r3, #0
 80003a8:	60bb      	str	r3, [r7, #8]
 80003aa:	e037      	b.n	800041c <Init_TaskStack+0xc8>
	{
		pPSP = (uint32_t*)user_tasks[i].psp_value;
 80003ac:	4a20      	ldr	r2, [pc, #128]	; (8000430 <Init_TaskStack+0xdc>)
 80003ae:	68bb      	ldr	r3, [r7, #8]
 80003b0:	011b      	lsls	r3, r3, #4
 80003b2:	4413      	add	r3, r2
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	60fb      	str	r3, [r7, #12]

		// Initialize xPSR place in the stack frame with a valid value "T-bit position = 1,
		// indicates the use of thumb ISA
		pPSP--;
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	3b04      	subs	r3, #4
 80003bc:	60fb      	str	r3, [r7, #12]
		*pPSP = xPSR_DUMMY_VAL;
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80003c4:	601a      	str	r2, [r3, #0]

		// Initialize PC place with the next task (to be executed) address value
		pPSP--;
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	3b04      	subs	r3, #4
 80003ca:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t)(user_tasks[i].task_handler);
 80003cc:	4a18      	ldr	r2, [pc, #96]	; (8000430 <Init_TaskStack+0xdc>)
 80003ce:	68bb      	ldr	r3, [r7, #8]
 80003d0:	011b      	lsls	r3, r3, #4
 80003d2:	4413      	add	r3, r2
 80003d4:	330c      	adds	r3, #12
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	461a      	mov	r2, r3
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	601a      	str	r2, [r3, #0]

		// Hold a valid EXC_RETURN value into the LR register, in order to exit the task to thread mode
		// using PSP pointer
		pPSP--;
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	3b04      	subs	r3, #4
 80003e2:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	f06f 0202 	mvn.w	r2, #2
 80003ea:	601a      	str	r2, [r3, #0]

		// Initially, assign the general purpose register places to 0's
		for (uint32_t j = 0; j < 13; j++)
 80003ec:	2300      	movs	r3, #0
 80003ee:	607b      	str	r3, [r7, #4]
 80003f0:	e008      	b.n	8000404 <Init_TaskStack+0xb0>
		{
			pPSP--;
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	3b04      	subs	r3, #4
 80003f6:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
		for (uint32_t j = 0; j < 13; j++)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	3301      	adds	r3, #1
 8000402:	607b      	str	r3, [r7, #4]
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	2b0c      	cmp	r3, #12
 8000408:	d9f3      	bls.n	80003f2 <Init_TaskStack+0x9e>
		}

		// Save the last reached point in each task stack up until this point
		user_tasks[i].psp_value = (uint32_t)pPSP;
 800040a:	68fa      	ldr	r2, [r7, #12]
 800040c:	4908      	ldr	r1, [pc, #32]	; (8000430 <Init_TaskStack+0xdc>)
 800040e:	68bb      	ldr	r3, [r7, #8]
 8000410:	011b      	lsls	r3, r3, #4
 8000412:	440b      	add	r3, r1
 8000414:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < MAX_TASKS; i++)
 8000416:	68bb      	ldr	r3, [r7, #8]
 8000418:	3301      	adds	r3, #1
 800041a:	60bb      	str	r3, [r7, #8]
 800041c:	68bb      	ldr	r3, [r7, #8]
 800041e:	2b03      	cmp	r3, #3
 8000420:	d9c4      	bls.n	80003ac <Init_TaskStack+0x58>
	}
}
 8000422:	bf00      	nop
 8000424:	bf00      	nop
 8000426:	3714      	adds	r7, #20
 8000428:	46bd      	mov	sp, r7
 800042a:	bc80      	pop	{r7}
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	20000020 	.word	0x20000020
 8000434:	2001f400 	.word	0x2001f400
 8000438:	20020000 	.word	0x20020000
 800043c:	2001fc00 	.word	0x2001fc00
 8000440:	2001f800 	.word	0x2001f800
 8000444:	0800030d 	.word	0x0800030d
 8000448:	08000311 	.word	0x08000311
 800044c:	08000325 	.word	0x08000325
 8000450:	08000339 	.word	0x08000339

08000454 <Init_SystickTimer>:

// Loads the system timer with the desired number of ticks
void Init_SystickTimer(uint32_t clk_cycles)
{
 8000454:	b480      	push	{r7}
 8000456:	b085      	sub	sp, #20
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
	// Calculate the count value of the SYSTICK timer
	uint32_t cnt_value = (SYSTICK_CLK / clk_cycles) - 1;
 800045c:	4a11      	ldr	r2, [pc, #68]	; (80004a4 <Init_SystickTimer+0x50>)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	fbb2 f3f3 	udiv	r3, r2, r3
 8000464:	3b01      	subs	r3, #1
 8000466:	60fb      	str	r3, [r7, #12]
	*SRVR_REG |= cnt_value;
 8000468:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <Init_SystickTimer+0x54>)
 800046a:	681a      	ldr	r2, [r3, #0]
 800046c:	490e      	ldr	r1, [pc, #56]	; (80004a8 <Init_SystickTimer+0x54>)
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	4313      	orrs	r3, r2
 8000472:	600b      	str	r3, [r1, #0]

	// Choose the internal processor clock as SYSTICK clock source
	// enable TICKINT to trigger the SYSTICK ISR whenever counter reaches 0
	*SCSR_REG |= (1 << 2);
 8000474:	4b0d      	ldr	r3, [pc, #52]	; (80004ac <Init_SystickTimer+0x58>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a0c      	ldr	r2, [pc, #48]	; (80004ac <Init_SystickTimer+0x58>)
 800047a:	f043 0304 	orr.w	r3, r3, #4
 800047e:	6013      	str	r3, [r2, #0]
	*SCSR_REG |= (1 << 1);
 8000480:	4b0a      	ldr	r3, [pc, #40]	; (80004ac <Init_SystickTimer+0x58>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a09      	ldr	r2, [pc, #36]	; (80004ac <Init_SystickTimer+0x58>)
 8000486:	f043 0302 	orr.w	r3, r3, #2
 800048a:	6013      	str	r3, [r2, #0]

	// Enable the SYSTICK timer
	*SCSR_REG |= (1 << 0);
 800048c:	4b07      	ldr	r3, [pc, #28]	; (80004ac <Init_SystickTimer+0x58>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a06      	ldr	r2, [pc, #24]	; (80004ac <Init_SystickTimer+0x58>)
 8000492:	f043 0301 	orr.w	r3, r3, #1
 8000496:	6013      	str	r3, [r2, #0]
}
 8000498:	bf00      	nop
 800049a:	3714      	adds	r7, #20
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	00f42400 	.word	0x00f42400
 80004a8:	e000e014 	.word	0xe000e014
 80004ac:	e000e010 	.word	0xe000e010

080004b0 <change_sp_to_psp>:

// Switches the SP from MSP to PSP
__attribute__((naked)) void change_sp_to_psp(void)
{
	// Push the value of the LR in order to save it before branching to another C function
	__asm volatile("PUSH {LR}");
 80004b0:	b500      	push	{lr}
	__asm volatile("BL get_psp_value");
 80004b2:	f000 f879 	bl	80005a8 <get_psp_value>
	__asm volatile("MSR PSP, R0");
 80004b6:	f380 8809 	msr	PSP, r0

	__asm volatile("POP {LR}"); // retrieve the LR register value which will redirect to main()
 80004ba:	f85d eb04 	ldr.w	lr, [sp], #4

	// Configure SP to PSP
	__asm volatile("MOV R0, 0x02");
 80004be:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL, R0");
 80004c2:	f380 8814 	msr	CONTROL, r0
	__asm volatile("BX LR");
 80004c6:	4770      	bx	lr
}
 80004c8:	bf00      	nop
	...

080004cc <task_delay>:

// Puts the task into blocked state then pends the PendSV exception
void task_delay(uint32_t block_cnt)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	INTERRUPT_DISABLE();
 80004d4:	f04f 0001 	mov.w	r0, #1
 80004d8:	f380 8810 	msr	PRIMASK, r0

	if (current_task)
 80004dc:	4b10      	ldr	r3, [pc, #64]	; (8000520 <task_delay+0x54>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d014      	beq.n	800050e <task_delay+0x42>
	{
		user_tasks[current_task].block_count = g_tick_cnt + block_cnt;
 80004e4:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <task_delay+0x58>)
 80004e6:	6819      	ldr	r1, [r3, #0]
 80004e8:	4b0d      	ldr	r3, [pc, #52]	; (8000520 <task_delay+0x54>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	440a      	add	r2, r1
 80004f0:	490d      	ldr	r1, [pc, #52]	; (8000528 <task_delay+0x5c>)
 80004f2:	011b      	lsls	r3, r3, #4
 80004f4:	440b      	add	r3, r1
 80004f6:	3304      	adds	r3, #4
 80004f8:	601a      	str	r2, [r3, #0]
		user_tasks[current_task].current_state = STATE_BLOCKED;
 80004fa:	4b09      	ldr	r3, [pc, #36]	; (8000520 <task_delay+0x54>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a0a      	ldr	r2, [pc, #40]	; (8000528 <task_delay+0x5c>)
 8000500:	011b      	lsls	r3, r3, #4
 8000502:	4413      	add	r3, r2
 8000504:	3308      	adds	r3, #8
 8000506:	2200      	movs	r2, #0
 8000508:	701a      	strb	r2, [r3, #0]
		schedule_next();
 800050a:	f000 f8b9 	bl	8000680 <schedule_next>
	}

	INTERRUPT_ENABLE();
 800050e:	f04f 0000 	mov.w	r0, #0
 8000512:	f380 8810 	msr	PRIMASK, r0
}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000000 	.word	0x20000000
 8000524:	20000060 	.word	0x20000060
 8000528:	20000020 	.word	0x20000020

0800052c <update_global_tick_count>:

// Updates the global tick count variable, tracking the system time
void update_global_tick_count(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
	g_tick_cnt++;
 8000530:	4b04      	ldr	r3, [pc, #16]	; (8000544 <update_global_tick_count+0x18>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	3301      	adds	r3, #1
 8000536:	4a03      	ldr	r2, [pc, #12]	; (8000544 <update_global_tick_count+0x18>)
 8000538:	6013      	str	r3, [r2, #0]
}
 800053a:	bf00      	nop
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000060 	.word	0x20000060

08000548 <unblock_task>:

// Unblocks the next task
void unblock_task(void)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
	for (uint32_t i = 1; i < MAX_TASKS; i++)
 800054e:	2301      	movs	r3, #1
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	e01b      	b.n	800058c <unblock_task+0x44>
	{
		if (user_tasks[i].current_state == STATE_BLOCKED)
 8000554:	4a12      	ldr	r2, [pc, #72]	; (80005a0 <unblock_task+0x58>)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	011b      	lsls	r3, r3, #4
 800055a:	4413      	add	r3, r2
 800055c:	3308      	adds	r3, #8
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d110      	bne.n	8000586 <unblock_task+0x3e>
		{
			if (user_tasks[i].block_count == g_tick_cnt)
 8000564:	4a0e      	ldr	r2, [pc, #56]	; (80005a0 <unblock_task+0x58>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	011b      	lsls	r3, r3, #4
 800056a:	4413      	add	r3, r2
 800056c:	3304      	adds	r3, #4
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <unblock_task+0x5c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	429a      	cmp	r2, r3
 8000576:	d106      	bne.n	8000586 <unblock_task+0x3e>
			{
				user_tasks[i].current_state = STATE_READY;
 8000578:	4a09      	ldr	r2, [pc, #36]	; (80005a0 <unblock_task+0x58>)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	011b      	lsls	r3, r3, #4
 800057e:	4413      	add	r3, r2
 8000580:	3308      	adds	r3, #8
 8000582:	2201      	movs	r2, #1
 8000584:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 1; i < MAX_TASKS; i++)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	3301      	adds	r3, #1
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2b03      	cmp	r3, #3
 8000590:	d9e0      	bls.n	8000554 <unblock_task+0xc>
			}
		}
	}
}
 8000592:	bf00      	nop
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000020 	.word	0x20000020
 80005a4:	20000060 	.word	0x20000060

080005a8 <get_psp_value>:

// Returns the last place at which PSP stopped at for the current task
uint32_t get_psp_value(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
	return user_tasks[current_task].psp_value;
 80005ac:	4b04      	ldr	r3, [pc, #16]	; (80005c0 <get_psp_value+0x18>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <get_psp_value+0x1c>)
 80005b2:	011b      	lsls	r3, r3, #4
 80005b4:	4413      	add	r3, r2
 80005b6:	681b      	ldr	r3, [r3, #0]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr
 80005c0:	20000000 	.word	0x20000000
 80005c4:	20000020 	.word	0x20000020

080005c8 <save_psp_value>:

// Saves the place of the last stacked item of the current task in it's private stack
void save_psp_value(uint32_t current_psp_value)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = current_psp_value;
 80005d0:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <save_psp_value+0x20>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a05      	ldr	r2, [pc, #20]	; (80005ec <save_psp_value+0x24>)
 80005d6:	011b      	lsls	r3, r3, #4
 80005d8:	4413      	add	r3, r2
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	601a      	str	r2, [r3, #0]
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr
 80005e8:	20000000 	.word	0x20000000
 80005ec:	20000020 	.word	0x20000020

080005f0 <update_task>:

// Round-Robin scheduling
void update_task(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
	State_t state = STATE_BLOCKED;
 80005f6:	2300      	movs	r3, #0
 80005f8:	71fb      	strb	r3, [r7, #7]

	for (uint32_t i = 0; i < MAX_TASKS; i++)
 80005fa:	2300      	movs	r3, #0
 80005fc:	603b      	str	r3, [r7, #0]
 80005fe:	e01c      	b.n	800063a <update_task+0x4a>
	{
		current_task++;
 8000600:	4b16      	ldr	r3, [pc, #88]	; (800065c <update_task+0x6c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	3301      	adds	r3, #1
 8000606:	4a15      	ldr	r2, [pc, #84]	; (800065c <update_task+0x6c>)
 8000608:	6013      	str	r3, [r2, #0]
		current_task %= MAX_TASKS;
 800060a:	4b14      	ldr	r3, [pc, #80]	; (800065c <update_task+0x6c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f003 0303 	and.w	r3, r3, #3
 8000612:	4a12      	ldr	r2, [pc, #72]	; (800065c <update_task+0x6c>)
 8000614:	6013      	str	r3, [r2, #0]
		state = user_tasks[current_task].current_state;
 8000616:	4b11      	ldr	r3, [pc, #68]	; (800065c <update_task+0x6c>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a11      	ldr	r2, [pc, #68]	; (8000660 <update_task+0x70>)
 800061c:	011b      	lsls	r3, r3, #4
 800061e:	4413      	add	r3, r2
 8000620:	3308      	adds	r3, #8
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	71fb      	strb	r3, [r7, #7]
		if ((state == STATE_READY) && (current_task != 0))
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	2b01      	cmp	r3, #1
 800062a:	d103      	bne.n	8000634 <update_task+0x44>
 800062c:	4b0b      	ldr	r3, [pc, #44]	; (800065c <update_task+0x6c>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d106      	bne.n	8000642 <update_task+0x52>
	for (uint32_t i = 0; i < MAX_TASKS; i++)
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	3301      	adds	r3, #1
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	2b03      	cmp	r3, #3
 800063e:	d9df      	bls.n	8000600 <update_task+0x10>
 8000640:	e000      	b.n	8000644 <update_task+0x54>
		{
			break;
 8000642:	bf00      	nop
		}
	}
	if (state == STATE_BLOCKED)
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d102      	bne.n	8000650 <update_task+0x60>
	{
		current_task = 0;
 800064a:	4b04      	ldr	r3, [pc, #16]	; (800065c <update_task+0x6c>)
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
	}
}
 8000650:	bf00      	nop
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	bc80      	pop	{r7}
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	20000000 	.word	0x20000000
 8000660:	20000020 	.word	0x20000020

08000664 <EnableProcessorFaults>:

void EnableProcessorFaults(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
	// setting MEMFAULTENA, BUSFAULTENA, USGFAULTENA bits on the
	// System Handler and Control Status Register (SHCSR) of the
	// System Control Block (SCB) unit of the processor
	*SHCSR_REG |= (0x7 << 16);
 8000668:	4b04      	ldr	r3, [pc, #16]	; (800067c <EnableProcessorFaults+0x18>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a03      	ldr	r2, [pc, #12]	; (800067c <EnableProcessorFaults+0x18>)
 800066e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000672:	6013      	str	r3, [r2, #0]
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	e000ed24 	.word	0xe000ed24

08000680 <schedule_next>:

// Pends the PendSV exception
void schedule_next(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
	*ICSR_REG |= (1 << 28);
 8000684:	4b04      	ldr	r3, [pc, #16]	; (8000698 <schedule_next+0x18>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a03      	ldr	r2, [pc, #12]	; (8000698 <schedule_next+0x18>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068e:	6013      	str	r3, [r2, #0]
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	e000ed04 	.word	0xe000ed04

0800069c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800069c:	480d      	ldr	r0, [pc, #52]	; (80006d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800069e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a4:	480c      	ldr	r0, [pc, #48]	; (80006d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80006a6:	490d      	ldr	r1, [pc, #52]	; (80006dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80006a8:	4a0d      	ldr	r2, [pc, #52]	; (80006e0 <LoopForever+0xe>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ac:	e002      	b.n	80006b4 <LoopCopyDataInit>

080006ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b2:	3304      	adds	r3, #4

080006b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b8:	d3f9      	bcc.n	80006ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ba:	4a0a      	ldr	r2, [pc, #40]	; (80006e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006bc:	4c0a      	ldr	r4, [pc, #40]	; (80006e8 <LoopForever+0x16>)
  movs r3, #0
 80006be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c0:	e001      	b.n	80006c6 <LoopFillZerobss>

080006c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c4:	3204      	adds	r2, #4

080006c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c8:	d3fb      	bcc.n	80006c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006ca:	f000 f811 	bl	80006f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ce:	f7ff fe07 	bl	80002e0 <main>

080006d2 <LoopForever>:

LoopForever:
    b LoopForever
 80006d2:	e7fe      	b.n	80006d2 <LoopForever>
  ldr   r0, =_estack
 80006d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006dc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80006e0:	08000758 	.word	0x08000758
  ldr r2, =_sbss
 80006e4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80006e8:	20000064 	.word	0x20000064

080006ec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006ec:	e7fe      	b.n	80006ec <ADC_IRQHandler>
	...

080006f0 <__libc_init_array>:
 80006f0:	b570      	push	{r4, r5, r6, lr}
 80006f2:	4d0d      	ldr	r5, [pc, #52]	; (8000728 <__libc_init_array+0x38>)
 80006f4:	4c0d      	ldr	r4, [pc, #52]	; (800072c <__libc_init_array+0x3c>)
 80006f6:	1b64      	subs	r4, r4, r5
 80006f8:	10a4      	asrs	r4, r4, #2
 80006fa:	2600      	movs	r6, #0
 80006fc:	42a6      	cmp	r6, r4
 80006fe:	d109      	bne.n	8000714 <__libc_init_array+0x24>
 8000700:	4d0b      	ldr	r5, [pc, #44]	; (8000730 <__libc_init_array+0x40>)
 8000702:	4c0c      	ldr	r4, [pc, #48]	; (8000734 <__libc_init_array+0x44>)
 8000704:	f000 f818 	bl	8000738 <_init>
 8000708:	1b64      	subs	r4, r4, r5
 800070a:	10a4      	asrs	r4, r4, #2
 800070c:	2600      	movs	r6, #0
 800070e:	42a6      	cmp	r6, r4
 8000710:	d105      	bne.n	800071e <__libc_init_array+0x2e>
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f855 3b04 	ldr.w	r3, [r5], #4
 8000718:	4798      	blx	r3
 800071a:	3601      	adds	r6, #1
 800071c:	e7ee      	b.n	80006fc <__libc_init_array+0xc>
 800071e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000722:	4798      	blx	r3
 8000724:	3601      	adds	r6, #1
 8000726:	e7f2      	b.n	800070e <__libc_init_array+0x1e>
 8000728:	08000750 	.word	0x08000750
 800072c:	08000750 	.word	0x08000750
 8000730:	08000750 	.word	0x08000750
 8000734:	08000754 	.word	0x08000754

08000738 <_init>:
 8000738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800073a:	bf00      	nop
 800073c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800073e:	bc08      	pop	{r3}
 8000740:	469e      	mov	lr, r3
 8000742:	4770      	bx	lr

08000744 <_fini>:
 8000744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000746:	bf00      	nop
 8000748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800074a:	bc08      	pop	{r3}
 800074c:	469e      	mov	lr, r3
 800074e:	4770      	bx	lr
